#!/usr/bin/env python
"""Script to create a pyinstaller executable.

This exe can then be wrapped in a platform specific installer for each
supported platform.
"""
import argparse
import os
import sys
import shutil
from distutils.dir_util import copy_tree

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils import run


ROOT = os.path.dirname(os.path.dirname(os.path.dirname(
    os.path.abspath(__file__))))
EXE_DIR = os.path.join(ROOT, 'exe')
PYINSTALLER_DIR = os.path.join(EXE_DIR, 'pyinstaller')
ASSETS_DIR = os.path.join(EXE_DIR, 'assets')
EXE_NAME = 'aws'


def make_pyinstaller(output_dir, cleanup=True):
    output_exe_dir = os.path.join(output_dir, 'aws')
    delete_existing_exe(output_exe_dir)
    output_exe_dist_dir = os.path.join(output_exe_dir, 'dist')
    aws_exe_build = pyinstaller('aws.spec')
    copy_directory(aws_exe_build, output_exe_dist_dir)
    aws_complete_exe_build = pyinstaller('aws_completer.spec')
    copy_directory_contents_into(aws_complete_exe_build, output_exe_dist_dir)
    copy_directory_contents_into(ASSETS_DIR, output_exe_dir)
    if cleanup:
        cleanup_build()
    print('Pyinstaller binary available at: %s' % os.path.join(
        output_exe_dist_dir, 'aws'))


def delete_existing_exe(exe_dir):
    if os.path.isdir(exe_dir):
        shutil.rmtree(exe_dir)
    build_dir = os.path.join(PYINSTALLER_DIR, 'dist')
    if os.path.isdir(build_dir):
        shutil.rmtree(build_dir)


def pyinstaller(specfile):
    aws_spec_path = os.path.join(PYINSTALLER_DIR, specfile)
    print(run('pyinstaller %s' % (aws_spec_path), cwd=PYINSTALLER_DIR))
    return os.path.join(
        PYINSTALLER_DIR, 'dist', os.path.splitext(specfile)[0])


def copy_directory(src, dst):
    print('Copying %s -> %s' % (src, dst))
    shutil.copytree(src, dst)


def copy_directory_contents_into(src, dst):
    print('Copying contents of %s into %s' % (src, dst))
    copy_tree(src, dst)


def cleanup_build():
    locations = [
        os.path.join(PYINSTALLER_DIR, 'build'),
        os.path.join(PYINSTALLER_DIR, 'dist'),
    ]
    for location in locations:
        shutil.rmtree(location)
        print('Deleted build directory: %s' % location)


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        '--output-dir',
        default=os.path.join(ROOT, 'dist'),
        help=(
            'The directory in which to write the output artifacts. By default '
            'this will be the "dist" directory in the root of the awscli.'
        )
    )
    parser.add_argument(
        '--no-cleanup',
        dest='cleanup',
        action='store_false',
        default=True,
        help=(
            'Leave the build folder produced by pyinstaller. This can be '
            'useful for debugging.'
        ),
    )
    args = parser.parse_args()

    output_dir = os.path.abspath(args.output_dir)
    make_pyinstaller(output_dir, cleanup=args.cleanup)


if __name__ == "__main__":
    main()
